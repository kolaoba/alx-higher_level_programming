# 2-matrix_divided.txt

The ``matrix_divided`` module
=============================

Using the ``matrix_divided(matrix, div)`` function
--------------------------------------------------

This function returns a new matrix that is a copy of 
the param ``matrix`` with all its elements divided by ``div``


Importing the function
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Testing the matrix
===================

	>>> matrix = [
	...	[5, 10, 15],
	...	[20, 25, 30]
	... ]
	>>> print(matrix_divided(matrix, 5))
	[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

The original matrix is left unchanged

	>>> print(matrix)
	[[5, 10, 15], [20, 25, 30]]

Testing for non-factors
	
	>>> matrix = [
	...     [5, 6, 7],
        ...     [8, 9, 10]
        ... ]
        >>> print(matrix_divided(matrix, 5))
        [[1.0, 1.2, 1.4], [1.6, 1.8, 2.0]]

        >>> print(matrix_divided(matrix, 3))
        [[1.67, 2.0, 2.33], [2.67, 3.0, 3.33]]

Testing with floats, should round to 2 decimal places max

	>>> matrix = [
    	...     [1, -2.2, 3, 4.4, 5],
    	...     [-6.6, 7.00, 8, 9.999, 10]
    	... ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, -0.73, 1.0, 1.47, 1.67], [-2.2, 2.33, 2.67, 3.33, 3.33]]

Testing for invalid matrix input/declaration, should raise TypeError

	>>> matrix = "random string"
	>>> print(matrix_divided(matrix, 5))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = None
	>>> print(matrix_divided(matrix, 58))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing for empty list, should raise TypeError

	>>> matrix = []
	>>> print(matrix_divided(matrix, 6))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing for non empty list but not list of lists, should raise TypeError

	>>> matrix = [4, 5, 6]
	>>> print(matrix_divided(matrix, 6))
        Traceback (most recent call last):
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing for empty list of lists, should pass
	
	>>> matrix = [[]]
	>>> print(matrix_divided(matrix, 6))
	[[]]

Testing for invalid elements in matrix, should raise TypeError

	>>> matrix = [
	...     [1, 2, 3],
	...     [4, "not a number", 6]
	... ]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing for inconsistent list/row size in matrix, should raise TypeError

	>>> matrix = [
	...     [4, 7, 2, 8],
	...     [31, 7, 9]
	... ]
	>>> print(matrix_divided(matrix, 1000))
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size


Testing the Divisor
===================

Testing for string value of div, should raise TypeError
	>>> matrix = [
	...     [1, 2, 3],
	...     [4, 5, 6]
	... ]
	>>> print(matrix_divided(matrix, "not a number"))
	Traceback (most recent call last):
	TypeError: div must be a number

Testing for None value of div. should raise TypeError

	>>> print(matrix_divided(matrix, None))
	Traceback (most recent call last):
	TypeError: div must be a number

Testing for zero value of div, should raise ZeroDivisionError

	>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last):
	ZeroDivisionError: division by zero
